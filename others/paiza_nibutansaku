- [二分探索とは](#二分探索とは)
    - [値の探索](#値の探索)
  - [ある値以下または以上の要素数を求める](#ある値以下または以上の要素数を求める)
    - [lower\_bound](#lower_bound)
    - [upper\_bound](#upper_bound)
    - [ある範囲に含まれている整数の個数](#ある範囲に含まれている整数の個数)


# 二分探索とは
```
ソートされた数列 A = (A_1, A_2, ..., A_n) と、q 個の整数 k_1, k_2, ..., k_q が与えられます。各 k_i について、数列 A に含まれているなら Yes と、含まれていないなら No と出力してください。



なお、n, q の最大値はいずれも 200,000 です。




q 回線形探索を行うことで解けそうですが、制約を見ると数列 A のサイズは最大で 200,000 、q も最大で 200,000 ですから、最悪で 200,000 * 200,000 回処理をする必要があり、これでは到底処理が終わりません。何か工夫をする必要があります。



A がソート済みであることに注目します。A の真ん中の要素が k 未満であれば、A の前半分の要素もすべて k 未満であることがわかります。つまり、A の前半分について探索する必要が無くなります。逆に、A の真ん中の要素が k より大きければ、A の後ろ半分の要素もすべて k より大きいので、A の後ろ半分について探索する必要が無くなります。
```

```
/**
ソート済みの数列 A に 値 k が含まれているなら true を、含まれていないなら no を返す
*/
binary_search(A : 数列, n : 数列のサイズ, k : 探索する値)
    // 探索範囲 [left, right]
    left = 0
    right = n-1
    
    // 探索範囲を狭めていく
    while left <= right

        // 探索範囲の中央
        mid = (left + right) / 2

        if A[mid] == k then
            return true
        else if A[mid] < k then
            left = mid+1
        else 
            right = mid-1
    
    return false
```


### [値の探索](https://paiza.jp/works/mondai/binary_search/binary_search__basic_step0/edit?language_uid=ruby)

- 方針
```
問題文にて与えられた疑似コードに従って、二分探索をおこなう関数 binary_search を実装すればよいです。

探索範囲は閉区間 [left, right] で持つのがよいでしょう。
区間 [0, n-1] を探索範囲とした状態からスタートし、探索範囲の中央 mid = (left+right)/2 を求める
探索する値 k と、a[mid] を比較する

a[mid] == k なら、値が見つかったので true を返す
a[mid] < k なら、a[left] ~ a[mid] には値 k が存在しないことがわかるので、探索範囲の左端 left を mid+1 にする

a[mid] > k なら、a[mid] ~ a[right] には値 k が存在しないことがわかるので、探索範囲の右端 right を mid-1 にする
ことを、探索範囲が空になるまで繰り返せばよいです。

探索範囲が空に、つまり left <= right が成り立たなくなってしまった場合は、数列に値 k が含まれていないということになるため、false を返します。
```

- 入力値
```
10
3 11 18 25 40 58 69 81 88 99
5
11
100
2
41
69
```

- 回答
```ruby
# 配列の要素数
n = gets.to_i

# 配列を取得
s = gets.split(" ").map(&:to_i)

# 繰り返し回数
time = gets.to_i

# time回繰り返す
(0...time).each do |i|

    # 入力を受け取る
    k = gets.to_i
    left = 0 # 配列の左側
    right = n-1 # 配列の右側 閉区間なので-1を忘れずに（重要）
    result = "No" # デフォルト値を設定しておく
    
    # 最後の一つになるまで繰り返す
    # 配列の真ん中がkになるまで繰り返す
    # 最後の一つになるまでkがなければデフォルト値のNoがresultになる
    while left <= right

        # 配列の要素の真ん中のインデックス
        mid = (left + right) / 2
        
        # 配列の真ん中は"k"?
        if s[mid] == k
            result = "Yes"
            break
        
        # kが右側にあるので探索する範囲を変える
        # 探索開始位置を真ん中+1からにする
        elsif s[mid] < k
            left = mid + 1

        # kが左側にあるので探索する範囲を変える
        # 探索終了位置を真ん中-1にする
        else
            right = mid - 1
        end
    end
    puts result
end
```

## ある値以下または以上の要素数を求める
```
n 人の生徒が受けた、10^9 点満点のテストの採点結果 A_1, A_2, ..., A_n があります。あなたは合格点を自由に設定することができます。合格点が k 点のとき、k 点以上を取った生徒が合格で、k 点未満を取った生徒が不合格です。



q 個の整数 k_1, k_2, ..., k_q が与えられます。各 k_i について、合格点が k_i のときに合格する生徒の人数を答えてください。



なお、n, q の最大値はいずれも 200,000 です。




制約を見ると、生徒の人数 n は最大で 200,000 人で、与えられる合格点の候補 k の数は 200,000 です。k が与えられるたびに生徒ひとりひとりの点数を確認し、合格者数を求めるアプローチで解こうとすると、最悪で 200,000 * 200,000 回処理をする必要があり、これでは実行時間制限に間に合いません。



二分探索は、このような問題にも適用することができます。具体的には、単調性のある列の境界を求める状況に適用することができます。



以降では、簡単のために 0 始まりの添字で記述します。A_0, A_1, ..., A_{n-1} をソートします。すると、A_x >= k ならば、y >= x を満たすすべての y について A_y >= k であることから、A_i >= k を満たすような i の最小値 min_i がわかれば、合格者数の人数は n - min_i で求めることができます。ただし、A_i >= k を満たすような i がひとつも存在しない場合は、min_i を n とします。

```

- 求め方
```
/**
    A_i >= k を満たす最小の i を返す
    A_i >= k を満たす i が存在しない場合は n を返す
*/
binary_search(A : 数列, n : 数列のサイズ, k : 基準)
    // 探索範囲 [left, right]
    left = 0
    right = n
    
    // 探索範囲を狭めていく
    while left < right
        // 探索範囲の中央
        mid = (left + right) / 2

        if a[mid] < k then
            // a[0] ~ a[mid] は k 未満なので調べる必要が無い
            left = mid+1
        else
            right = mid
    
    return right
```

### [lower_bound](https://paiza.jp/works/mondai/binary_search/binary_search__basic_step1/edit?language_uid=ruby)



```ruby
# 入力例
10
45 62 11 81 75 90 13 2 97 32
5
90
75
50
1
63

# 出力例
2
4
5
10
4
```

- 回答
```ruby
# 要素数
l = gets.to_i

# 配列を取得
s = gets.split(" ").map(&:to_i).sort

# 繰り返し回数
n = gets.to_i

(0...n).each do |i|
    k = gets.to_i # この値以上の要素数を求める
    left = 0
    right = l 
    
    while left < right
        # 二部探索の真ん中を求める
        mid = (left + right)/2

        # 
        if s[mid] < k
            left = mid + 1
        elsif s[mid] >= k
            right = mid
        end
    end
    puts "#{l - right}"
end
```

### [upper_bound](https://paiza.jp/works/mondai/binary_search/binary_search__basic_step2)

- 探索範囲が変化する

```ruby
length = gets.to_i
s = gets.split(" ").map(&:to_i).sort
n = gets.to_i

n.times do
    target = gets.to_i
    left = 0
    right = length
   
   while left < right
       mid = (left + right) / 2
       
        # 前の以上からより大きいに変わっているのでtarget+1 にすればOK
        if target+1 > s[mid]
            left = mid + 1
        else
            right = mid
        end
    end
    puts "#{length - right}"
    
end
```

### [ある範囲に含まれている整数の個数](https://paiza.jp/works/mondai/binary_search/binary_search__basic_boss)



```ruby
length = gets.to_i
s = gets.split(" ").map(&:to_i).sort
n = gets.to_i

n.times do
    min,max = gets.split(" ").map(&:to_i)
    left = 0
    right = length
   
   # 以上の条件の要素数を抜き出す
   while left < right
       mid = (left + right) / 2
       
        if min  > s[mid]
            left = mid + 1
        else
            right = mid
        end
    end
    
    lower_count = length - right
    left = 0
    right = length
    
    # 条件より大きい要素数を抜き出す
    while left < right
       mid = (left + right) / 2
       
       # "より大きい"が条件なので"+1"にすること
        if max + 1 > s[mid]
            left = mid + 1
        else
            right = mid
        end
    end
    upper_count = length - right

    # 以上の条件の要素数から、上限より大きい要素数を引いたの値が回答になる
    puts "#{lower_count - upper_count}"
end
```

- メソッドでまとめたバージョン
```ruby
length = gets.to_i
s = gets.split(" ").map(&:to_i).sort
n = gets.to_i

def binary_serch(m,length,s)
    left = 0
    right = length
   
   while left < right
       mid = (left + right) / 2
       
        if m  > s[mid]
            left = mid + 1
        else
            right = mid
        end
    end
  return length - right
 end
 
 n.times do
     min,max = gets.split(" ").map(&:to_i)
     lower_count = binary_serch(min,length,s)
     upper_count = binary_serch(max + 1,length,s)
     puts "#{lower_count - upper_count}"
end

```